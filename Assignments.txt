Create a C# program to convert from celsius degrees to Kelvin and Fahrenheit: it will ask the user for the amount of celsius degrees and using the following conversion tables:

kelvin = celsius + 273

fahrenheit = celsius x 18 / 10 + 32
---------------------------------------------------------------------------------------------
Write a C# program to ask the user for a number and display its multiplication table, using a "while" statement. The result must be like this:
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
-----------------------------------------------------------------------------------------------
Create a C# program to ask the user for 10 real numbers and display the average of the positive ones and the average of the negative ones.

------------------------------------------------------------------------------------------------
Implement the body for the following function:
static boolean isValidDate(int year, int month, int day) { 
	// do stuff here
	return false; 
}

The function should check if the parameter values constitute a valid calendar date or not. Accordingly return true or false.
For example,
1) year=2018, month=13, day=1 is an invalid date as the possible values for month is 1 to 12.
2) year=2018, month=2, day=29 is an invalid date as the maximum days in February is 28 in the year 2018
3) year=2016, month=2, day=29 is a valid date.
Write a  program to call the above function multiple times with different values.
-------------------------------------------------------------------------------------------------------
Implement the body for the following function:
static boolean isPrimeNumber(int num) { 
	return false; 
}
The function should check and return true only if the number passed as argument is a prime number.
Write a  program to call the above function multiple times with different values.
-------------------------------------------------------------------------------------------------------
Write a function called "sortThreeNumbers", which takes 3 distinct integers and prints them in ascending order.
public void sortThreeNumbers(int a, int b, int c) { 
	// do stuff here
}
For example,

* sortThreeNumbers(2, 10, 1); // prints 1, 2, 10 
* sortThreeNumbers(20, 10, 1); // prints 1, 10, 20 
* sortThreeNumbers(2, 10, 100); // prints 2, 10, 100 and so on.

Write a  program to call the above function multiple times with different values.

-------------------------------------------------------------------------------------------------------
Write a function called "sumOfPrimes", that takes two integers as input and returns the sum of all the prime numbers between the same.

````
public int sumOfPrimes(int from, int to) { 
	// do stuff here
	return 0; 
}

Write a  program to call the above function multiple times with different values.
-------------------------------------------------------------------------------------------------------


In mathematics, the Fibonacci numbers are the numbers in the following integer sequence, characterized by the fact that every number after the first two numbers is the sum of the two preceding ones:

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...

Write a function called "fibonacci", that takes index as paramter and returns the fibonacci number at that index.

````
public int fibonacci(int index) { 
	// do stuff here
	return 0; 
}
````

-------------------------------------------------------------------------------------------------------


Write a  program to print the following pattern:

````
*
**
***
****
*****
````

The number of rows should be based on the value of a variable "num", and the number of stars in a row is based on the row number itself.
-------------------------------------------------------------------------------------------------------


In trignometry, the Sine of an angle is represented by the series below:

<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/3d9689077ce39529e3198213901261ebcf48197d">


Write a  function that accepts angle in degrees and returns the sine of the given angle.

Call the function in main, multiple times by supplying multiple values and verify the same.

PS:
* Divide the function into small reusable functions, if possible.
* Do not use builtin  classes like `Math`
-------------------------------------------------------------------------------------------------------



Implement the  function listed below:

````
public static void printCalendar(int month, int year) {
	/// do stuff here
}
````

The function should accept `month` and `year` and print the calendar for the same. If inputs are invalid, appropriate error message/s should be printed.

Sample output for the inputs (8, 2018):

````
Su Mo Tu We Th Fr Sa  
          1  2  3  4  
 5  6  7  8  9 10 11  
12 13 14 15 16 17 18  
19 20 21 22 23 24 25  
26 27 28 29 30 31  
````

PS: 
* Do not use any builtin  classes like `Date` or `Calendar`
* Divide the function into small reusable functions, if possible.

-------------------------------------------------------------------------------------------------------

Write a function called "sumOfEvensAndOdds", that takes an array of integers as input and returns another array of integers of length 2. The first element in the returned array is the sum of all even numbers in the input array, and the second element in the returned array is the sum of all odd numbers in the input array.

````
public int[] sumOfEvensAndOdds(int []nums) { 
	// do stuff here
	return null;
}
````

For example,
 
````
int [] nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; 
int [] result = sumOfEvensAndOdds(nums);
// result should be equal to {30, 25}
````

Hint:

An arrays is created as shown below:

````
int []arr = new int[2];
arr[0] = 12;
arr[1] = 100;
````

or

````
int []arr = {12, 100}
````

Call the function in main, multiple times by supplying multiple values and verify the same.

-------------------------------------------------------------------------------------------------------


Write a function called "reverseByWords", that takes a sentence (string) as an input, and returns another string. The return value must be a sentence in which the words in the original sentence appear in reverse order.

````
public String reverseByWords(String sentence) { 
	// do stuff here
	return null; 
}
````


For example,

````
String out = reverseByWords("my name is vinod and i live in bangalore");
// the variable "out" should be equal to "bangalore in live i and vinod is name my".
````

Call the function in main, multiple times by supplying multiple values and verify the same.

-------------------------------------------------------------------------------------------------------



Write a function called "inWords" that takes a number between 1 and 99,99,99,999 and returns a String representing the input number in words.

````
public String inWords(int num) { 
	// do stuff here
	return null; 
}

````
For example,

````
inWords(12345);
// should return "twelve thousand three hundred forty five"
inWords(10203040);
// should return "one crore two lakh three thousand forty"
inWords(101);
// should return "one hundred one"
````


Call the function in main, multiple times by supplying multiple values and verify the same.

-------------------------------------------------------------------------------------------------------
Create a class named "Table". It must have a constructor, indicating the width and height of the board. It will have a method "ShowData" which will write on the screen the width and that height of the table. Create an array containing 10 tables, with random sizes between 50 and 200 cm, and display all the data.

-----------------------------------------------------------------------------------------------------


Create classes `Circle` and `Cylinder`


In the `main()` function of a Program class, create an array of `Circle` references with the initialization shown below:

Circle[] circles = {
	new Cylinder(12.34),
	new Cylinder(12.34, 10.0),
	new Cylinder(12.34, 10.0, "blue")
};

````

Print the area of the circular region of each cylinder along with the volume of the same.
-------------------------------------------------------------------------------------------------------

Create the classes `Person`, `Student`, and `Staff`

In the `main()` function of a Program class, create an array of `Person` references with the initialization shown below:

Person[] people = {
	new Student("Shyam", "Bangalore, Karnataka", " fundamentals", 2010, 4500.0),
	new Staff("Anand", "Bangalore, Karnataka", "Delhi Public school", 35000.0), 
	new Staff("Umesh", "Bangalore, Karnataka", "National Public school", 42000.0), 
	new Student("Suresh", "Hassan, Karnataka", " fundamentals", 2012, 4750.0),
	new Student("Kiran", "Vasco, Goa", "Reactjs", 2017, 12500.0)
};

````

Print the details of all `Person` objects (using the `ToString()`).

-------------------------------------------------------------------------------------------------------
Create a class "House", with an attribute "area", a constructor that sets its value and a method "ShowData" to display "I am a house, my area is 200 m2" (instead of 200, it will show the real surface). Include getters an setters for the area, too.
The "House" will contain a door. Each door will have an attribute "color" (a string), and a method "ShowData" wich will display "I am a door, my color is brown" (or whatever color it really is). Include a getter and a setter. Also, create a "GetDoor" in the house.
A "SmallApartment" is a subclass of House, with a preset area of 50 m2.
Also create a class Person, with a name (string). Each person will have a house. The method "ShowData" for a person will display his/her name, show the data of his/her house and the data of the door of that house.
Write a Main to create a SmallApartment, a person to live in it, and to show the data of the person.

----------------------------------------------------------------------------------------------


Create the classes `Shape`, `Circle`, `Rectangle`, and `Square`

The `ToString` function of the above classes should return text as given below:

Classname|Sample return value from ToString()
---|---
Shape|A Shape with color of xxx and filled/Not filled
Circle|A Circle with radius=xxx, which is a subclass of yyy (where yyy is the output of the ToString() method from the BaseClass)
Rectangle|A Rectangle with width=xxx and length=zzz, which is a subclass of yyy (where yyy is the output of the ToString() method from the BaseClass)
Square|A Square with side=xxx, which is a subclass of yyy (where yyy is the output of the ToString() method from the BaseClass)

In the `main()` method of a Program class, create an array of 10 `Shape` references containing a mixture of `Circle`, `Rectangle` and `Square` objects of different dimensions. Using a loop, print the `perimeter` and `area` for all of them.

-------------------------------------------------------------------------------------------------------


Write a  application to accept integers in a loop. After each number is accepted, the user should be asked if he/she wishes to continue. If the user inputs "NO", then the loop should be stopped and following output should be displayed:

```
Number of inputs = X
Number of integer inputs = Y
Number of non-integer inputs = Z
Sum of all integer inputs = XX
The integer inputs = N1, N2, N3, ...
The non-integer inputs = ASD, SDF, DFG, ...
X, Y, Z, etc should be actual values, based on the inputs.
```
-------------------------------------------------------------------------------------------------------


Write a function called "calendar" that takes a String representing year/month in YYYY-MM format and returns a two-dimensional array representing the calendar for the input month and year.

For example, if the input is "2018-03”, then the output is:

```
{
	{0, 0, 0, 0, 1, 2, 3},
	{4, 5, 6, 7, 8, 9, 10},
	{11, 12, 13, 14, 15, 16, 17}, 
	{18, 19, 20, 21, 22, 23, 24}, 
	{25, 26, 27, 28, 29, 30, 31}
}
```

For input "2018-02", the output should be:
{
	{0, 0, 0, 0, 1, 2, 3},
	{4, 5, 6, 7, 8, 9 10},
	{11, 12, 13, 14, 15, 16, 17}, 
	{18, 19, 20, 21, 22, 23, 24}, 
	{25, 26, 27, 28, 0, 0, 0}
}

The method should throw a custom exception **InvalidDateException**, in case if the input does not represent a valid year/month combination, and **InvalidInputException** in case if the input is not in the expected YYYY-MM format.


-------------------------------------------------------------------------------------------------------



Interface *Movable* and its implementations *MovablePoint* and *MovableCircle*

Write two classes - MovablePoint and MovableCircle - that implement the Movable interface.


For the MovablePoint class, declare the instance variable x, y, xSpeed and ySpeed with package access as shown with '~' in the class diagram (i.e., classes in the same package can access these variables directly). For the MovableCircle class, use a MovablePoint to represent its center (which contains four variable x, y, xSpeed and ySpeed). In other words, the MovableCircle composes a MovablePoint, and its radius.


public class MovablePoint : Movable {
   // instance variables
   int x, y, xSpeed, ySpeed;     // package access
   
   // Constructor
   public MovablePoint(int x, int y, int xSpeed, int ySpeed) {
      this.x = x;
      ......
   }
   ......
   
   // Implement abstract methods declared in the interface Movable
   
   public void moveUp() {
      y -= ySpeed;   // y-axis pointing down for 2D graphics
   }
   ......
}
```


```
public class MovableCircle : Movable { // saved as "MovableCircle."
   // instance variables
   private MovablePoint center;   // can use center.x, center.y directly
                                  //  because they are package accessible
   private int radius;
   
   // Constructor
   public MovableCircle(int x, int y, int xSpeed, int ySpeed, int radius) {
      // Call the MovablePoint's constructor to allocate the center instance.
      center = new MovablePoint(x, y, xSpeed, ySpeed);
      ......
   }
   ......
   
   // Implement abstract methods declared in the interface Movable
   public override void moveUp() {
      center.y -= center.ySpeed;
   }
   ......
}
```

Write a test program and try out these statements:

```
Movable m1 = new MovablePoint(5, 6, 10, 15);     // upcast
Console.WriteLine(m1);
m1.moveLeft();
Console.WriteLine(m1);
   
Movable m2 = new MovableCircle(1, 2, 3, 4, 20);  // upcast
Console.WriteLine(m2);
m2.moveRight();
Console.WriteLine(m2);
```

Write a new class called *MovableRectangle*, which composes two *MovablePoint* objects (representing the top-left and bottom-right corners) and implementing the *Movable* Interface. Make sure that the two points has the same speed.

In the test program, add the following code to test the new implementation:

```
 
Movable m3 = new MovableRectangle(1, 2, 3, 4, 25, 35);  // upcast
Console.WriteLine(m3);
m3.moveUp();
Console.WriteLine(m3);
```

--------------------------------------------------------------------------------------
File IO Assignment:
Write a program to read a text file and dump its content to another file, changing the lowercase letters to uppercase.
Write a program that uses Array of data and convert the data into a CSV file. 
Write a program that takes CSV file as Command line arg and displays the data of it in a tabular structure.
Create a class "Encrypter" to encrypt and decrypt text. It will have a "Encrypt" method, which will receive a string and return another string. It will be a static method, so that we do not need to create any object of type "Encrypter". There will be also a "Decrypt" method. In this first approach, the encryption method will be a very simple one: to encrypt we will add 1 to each character, so that "Hola" would become "Ipmb", and to decrypt we would subtract 1 to each character.